c
User.last.destroy
newuser.id
newuser = User.create username: data.info.nickname, password: "Github123", password_confirmation: "Github123", github_uid:data.uid
User.last.destroy
User.last
User.create username: data.info.nickname, password: "Github123", password_confirmation: "Github123", github_uid:data.uid
data.info
user.nil?
user = User.find_by github_uid: data.uid
data.uid
c
pp User.where(username: params[:username], github_uid: nil).limit 1
pp User.where username: params[:username], github_uid: nil
User.where username: params[:username], github_uid: nil
User.find_by(username: params[:username]).where github_uid:nil
pp User.all
c
pp User.all
User.all
c
env["omniauth.auth"].uid
env["omniauth.auth"].info
env["omniauth.auth"]
c
lol
c
user.favorite_beer ? (link_to user.favorite_beer.name, user.favorite_beer) : "None"
c
!(self.confirmed_memberships.where user_id:user.id).empty?
(self.confirmed_memberships.where user_id:user.id).empty?
(self.confirmed_memberships.where user_id:user.id).nil?
(self.confirmed_memberships.where user_id:user.id).empty?
(self.confirmed_memberships.where user_id:1).empty?
(self.confirmed_memberships.where user_id:user.id).empty?
self.confirmed_memberships.where user_id:user.id.empty?
self.confirmed_memberships.where user_id:user.id
self.confirmed_memberships
c
lol
@beer_club.is_member(current_user)
@beer_club.is_member
c
@beer_club.is_member
is_member
c
@beer_club.memberships.create user:current_user, confirmed:true
@beer_club.memberships.create user:current_user
@beer_club.memberships.create 
expect(find('table').find('tr:nth-child(2)')).to have_content "Fatenbier"
expect(find('table').find('tr:nth-child(2)')).to have_content "Fastenbier"
find('table').find('tr:nth-child(2)')
find('table).find('tr:nth-child(2)')
asd.text
asd
c
find('table').find('tr:nth-child(2)')
c
@order
@desc
c
@order
@desc
c
@order
@desc
c
!@desc
@desc
c
Style.all
pp @styles
@styles
c
puts "lol" if not is_admin
is_admin
quit
pp sorted.first(n)
sorted.first(n)
sorted
sorted.first.average_rating.to_f
sorted.last.average_rating.to_f
sorted.first.average_rating.to_f
sorted.first.average_rating
sorted.first
pp sorted
c
Beer.first.style
beer.save!
Beer.first.style
Beer.first
beer.save
beer.style_id
beer.style
quit
Beer.first.style
Beer.first
Beer.find(2)
beer.save
beer.style
c
beer.style
beer.valid?
beer.valid
beer.valid?
Beer.first.style
beer.save
Beer.first.style
Beer.first
beer.style_id
beer.style
c
beer
quit
beer
c
Beer.first
c
beer.save
beer.style = Style.find_by(name:beer.old_style)
Style.find_by(name:beer.old_style)
pp Beer.first
pp beer
beer.old_style
beer.stylel
beer.style
beer
c
Membership.where(beer_club_id:@beer_club.id, user_id:current_user.id).empty?
c
Membership.where(beer_club_id:@beer_club.id, user_id:current_user.id).empty?
Membership.where beer_club_id:@beer_club.id, user_id:current_user.id
c
Membership.where beer_club_id:@beer_club.id, user_id:current_user.id
pp Membership.where beer_club_id:@beer_club.id, user_id:current_user.id
pp Membership.where beer_club_id:@beer_club.id
Membership.where beer_club_id:@beer_club.id
Membership
quit
Beer.all
Beer.al
quit
Beer.all
beer
quit
beer
beer.brewery
beer.brewery = brewery
beer.brewery
brewery
Brewery
beer
quit
Beer.all
quit
Beer.all
Brewery.all
quit
Beer.all
Brewery.all
quit
brewery
Beer.all
Brewery.all
Rating.all
brewery
beer
quit
help
average.max_by { |k, v| v }[0]
average.max_by { |k, v| v }
average.max_by { |k, v| v }[0]
average.max
quit
sum[style]
style
quit
sum[rating].nil?
c
User.find @membership.user_id
find @membership.user_id
find
c
@membership
@membership.user_id = current_user.id
current_user.id
current_user
@membership
c
help
c
User.find_by(rating.user_id).username
User.find_by rating.user_id
rating.user_id
rating
c
beer.delete
beer
continue
help
params[:rating][:score]
params[:rating]
params
